/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v3.5.0), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 101 }

  /* === schema: public === */

  /* --- enums --- */


  /* --- tables --- */

  export namespace authors {
    export type Table = 'authors';
    export interface Selectable {
      /**
      * **authors.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_id_seq'::regclass)`
      */
      id: number;
      /**
      * **authors.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active: boolean;
      /**
      * **authors.first_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      first_name: string;
      /**
      * **authors.last_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      last_name: string;
      /**
      * **authors.library_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_library_id_seq'::regclass)`
      */
      library_id: number;
      /**
      * **authors.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes: string | null;
    }
    export interface JSONSelectable {
      /**
      * **authors.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_id_seq'::regclass)`
      */
      id: number;
      /**
      * **authors.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active: boolean;
      /**
      * **authors.first_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      first_name: string;
      /**
      * **authors.last_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      last_name: string;
      /**
      * **authors.library_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_library_id_seq'::regclass)`
      */
      library_id: number;
      /**
      * **authors.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes: string | null;
    }
    export interface Whereable {
      /**
      * **authors.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **authors.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **authors.first_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      first_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **authors.last_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      last_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **authors.library_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_library_id_seq'::regclass)`
      */
      library_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **authors.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **authors.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **authors.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **authors.first_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      first_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **authors.last_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      last_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **authors.library_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_library_id_seq'::regclass)`
      */
      library_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **authors.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **authors.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **authors.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **authors.first_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      first_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **authors.last_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      last_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **authors.library_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_library_id_seq'::regclass)`
      */
      library_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **authors.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'authors_pkey' | 'uk_authors_library_id_last_name_first_name';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace authors_series {
    export type Table = 'authors_series';
    export interface Selectable {
      /**
      * **authors_series.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_series_id_seq'::regclass)`
      */
      id: number;
      /**
      * **authors_series.author_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_series_author_id_seq'::regclass)`
      */
      author_id: number;
      /**
      * **authors_series.series_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_series_series_id_seq'::regclass)`
      */
      series_id: number;
    }
    export interface JSONSelectable {
      /**
      * **authors_series.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_series_id_seq'::regclass)`
      */
      id: number;
      /**
      * **authors_series.author_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_series_author_id_seq'::regclass)`
      */
      author_id: number;
      /**
      * **authors_series.series_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_series_series_id_seq'::regclass)`
      */
      series_id: number;
    }
    export interface Whereable {
      /**
      * **authors_series.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_series_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **authors_series.author_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_series_author_id_seq'::regclass)`
      */
      author_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **authors_series.series_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_series_series_id_seq'::regclass)`
      */
      series_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **authors_series.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_series_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **authors_series.author_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_series_author_id_seq'::regclass)`
      */
      author_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **authors_series.series_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_series_series_id_seq'::regclass)`
      */
      series_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **authors_series.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_series_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **authors_series.author_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_series_author_id_seq'::regclass)`
      */
      author_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **authors_series.series_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_series_series_id_seq'::regclass)`
      */
      series_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'authors_series_pkey' | 'uk_authors_series_author_id_series_id' | 'uk_authors_series_series_id_author_id';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace authors_stories {
    export type Table = 'authors_stories';
    export interface Selectable {
      /**
      * **authors_stories.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_stories_id_seq'::regclass)`
      */
      id: number;
      /**
      * **authors_stories.author_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_stories_author_id_seq'::regclass)`
      */
      author_id: number;
      /**
      * **authors_stories.story_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_stories_story_id_seq'::regclass)`
      */
      story_id: number;
    }
    export interface JSONSelectable {
      /**
      * **authors_stories.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_stories_id_seq'::regclass)`
      */
      id: number;
      /**
      * **authors_stories.author_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_stories_author_id_seq'::regclass)`
      */
      author_id: number;
      /**
      * **authors_stories.story_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_stories_story_id_seq'::regclass)`
      */
      story_id: number;
    }
    export interface Whereable {
      /**
      * **authors_stories.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_stories_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **authors_stories.author_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_stories_author_id_seq'::regclass)`
      */
      author_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **authors_stories.story_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_stories_story_id_seq'::regclass)`
      */
      story_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **authors_stories.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_stories_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **authors_stories.author_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_stories_author_id_seq'::regclass)`
      */
      author_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **authors_stories.story_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_stories_story_id_seq'::regclass)`
      */
      story_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **authors_stories.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_stories_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **authors_stories.author_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_stories_author_id_seq'::regclass)`
      */
      author_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **authors_stories.story_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_stories_story_id_seq'::regclass)`
      */
      story_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'authors_stories_pkey' | 'uk_authors_stories_author_id_story_id' | 'uk_authors_stories_story_id_author_id';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace authors_volumes {
    export type Table = 'authors_volumes';
    export interface Selectable {
      /**
      * **authors_volumes.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_volumes_id_seq'::regclass)`
      */
      id: number;
      /**
      * **authors_volumes.author_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_volumes_author_id_seq'::regclass)`
      */
      author_id: number;
      /**
      * **authors_volumes.volume_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_volumes_volume_id_seq'::regclass)`
      */
      volume_id: number;
    }
    export interface JSONSelectable {
      /**
      * **authors_volumes.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_volumes_id_seq'::regclass)`
      */
      id: number;
      /**
      * **authors_volumes.author_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_volumes_author_id_seq'::regclass)`
      */
      author_id: number;
      /**
      * **authors_volumes.volume_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_volumes_volume_id_seq'::regclass)`
      */
      volume_id: number;
    }
    export interface Whereable {
      /**
      * **authors_volumes.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_volumes_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **authors_volumes.author_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_volumes_author_id_seq'::regclass)`
      */
      author_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **authors_volumes.volume_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_volumes_volume_id_seq'::regclass)`
      */
      volume_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **authors_volumes.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_volumes_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **authors_volumes.author_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_volumes_author_id_seq'::regclass)`
      */
      author_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **authors_volumes.volume_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_volumes_volume_id_seq'::regclass)`
      */
      volume_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **authors_volumes.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_volumes_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **authors_volumes.author_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_volumes_author_id_seq'::regclass)`
      */
      author_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **authors_volumes.volume_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_volumes_volume_id_seq'::regclass)`
      */
      volume_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'authors_volumes_pkey' | 'uk_authors_volumes_author_id_volume_id' | 'uk_authors_volumes_volume_id_author_id';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace libraries {
    export type Table = 'libraries';
    export interface Selectable {
      /**
      * **libraries.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('libraries_id_seq'::regclass)`
      */
      id: number;
      /**
      * **libraries.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active: boolean;
      /**
      * **libraries.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **libraries.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes: string | null;
      /**
      * **libraries.scope**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      scope: string;
    }
    export interface JSONSelectable {
      /**
      * **libraries.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('libraries_id_seq'::regclass)`
      */
      id: number;
      /**
      * **libraries.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active: boolean;
      /**
      * **libraries.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **libraries.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes: string | null;
      /**
      * **libraries.scope**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      scope: string;
    }
    export interface Whereable {
      /**
      * **libraries.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('libraries_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **libraries.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **libraries.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **libraries.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **libraries.scope**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      scope?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **libraries.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('libraries_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **libraries.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **libraries.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **libraries.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **libraries.scope**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      scope: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **libraries.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('libraries_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **libraries.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **libraries.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **libraries.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **libraries.scope**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      scope?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'libraries_pkey' | 'uk_libraries_name';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace series {
    export type Table = 'series';
    export interface Selectable {
      /**
      * **series.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('series_id_seq'::regclass)`
      */
      id: number;
      /**
      * **series.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active: boolean;
      /**
      * **series.copyright**
      * - `int2` in database
      * - Nullable, no default
      */
      copyright: number | null;
      /**
      * **series.library_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('series_library_id_seq'::regclass)`
      */
      library_id: number;
      /**
      * **series.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **series.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes: string | null;
    }
    export interface JSONSelectable {
      /**
      * **series.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('series_id_seq'::regclass)`
      */
      id: number;
      /**
      * **series.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active: boolean;
      /**
      * **series.copyright**
      * - `int2` in database
      * - Nullable, no default
      */
      copyright: number | null;
      /**
      * **series.library_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('series_library_id_seq'::regclass)`
      */
      library_id: number;
      /**
      * **series.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **series.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes: string | null;
    }
    export interface Whereable {
      /**
      * **series.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('series_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **series.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **series.copyright**
      * - `int2` in database
      * - Nullable, no default
      */
      copyright?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **series.library_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('series_library_id_seq'::regclass)`
      */
      library_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **series.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **series.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **series.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('series_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **series.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **series.copyright**
      * - `int2` in database
      * - Nullable, no default
      */
      copyright?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **series.library_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('series_library_id_seq'::regclass)`
      */
      library_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **series.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **series.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **series.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('series_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **series.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **series.copyright**
      * - `int2` in database
      * - Nullable, no default
      */
      copyright?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **series.library_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('series_library_id_seq'::regclass)`
      */
      library_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **series.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **series.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'ix_series_library_id_name' | 'series_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace series_stories {
    export type Table = 'series_stories';
    export interface Selectable {
      /**
      * **series_stories.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('series_stories_id_seq'::regclass)`
      */
      id: number;
      /**
      * **series_stories.series_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('series_stories_series_id_seq'::regclass)`
      */
      series_id: number;
      /**
      * **series_stories.story_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('series_stories_story_id_seq'::regclass)`
      */
      story_id: number;
      /**
      * **series_stories.ordinal**
      * - `int2` in database
      * - Nullable, no default
      */
      ordinal: number | null;
    }
    export interface JSONSelectable {
      /**
      * **series_stories.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('series_stories_id_seq'::regclass)`
      */
      id: number;
      /**
      * **series_stories.series_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('series_stories_series_id_seq'::regclass)`
      */
      series_id: number;
      /**
      * **series_stories.story_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('series_stories_story_id_seq'::regclass)`
      */
      story_id: number;
      /**
      * **series_stories.ordinal**
      * - `int2` in database
      * - Nullable, no default
      */
      ordinal: number | null;
    }
    export interface Whereable {
      /**
      * **series_stories.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('series_stories_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **series_stories.series_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('series_stories_series_id_seq'::regclass)`
      */
      series_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **series_stories.story_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('series_stories_story_id_seq'::regclass)`
      */
      story_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **series_stories.ordinal**
      * - `int2` in database
      * - Nullable, no default
      */
      ordinal?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **series_stories.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('series_stories_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **series_stories.series_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('series_stories_series_id_seq'::regclass)`
      */
      series_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **series_stories.story_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('series_stories_story_id_seq'::regclass)`
      */
      story_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **series_stories.ordinal**
      * - `int2` in database
      * - Nullable, no default
      */
      ordinal?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **series_stories.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('series_stories_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **series_stories.series_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('series_stories_series_id_seq'::regclass)`
      */
      series_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **series_stories.story_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('series_stories_story_id_seq'::regclass)`
      */
      story_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **series_stories.ordinal**
      * - `int2` in database
      * - Nullable, no default
      */
      ordinal?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'series_stories_pkey' | 'uk_series_stories_series_id_story_id' | 'uk_series_stories_story_id_series_id';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace stories {
    export type Table = 'stories';
    export interface Selectable {
      /**
      * **stories.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('stories_id_seq'::regclass)`
      */
      id: number;
      /**
      * **stories.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active: boolean;
      /**
      * **stories.copyright**
      * - `int2` in database
      * - Nullable, no default
      */
      copyright: number | null;
      /**
      * **stories.library_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('stories_library_id_seq'::regclass)`
      */
      library_id: number;
      /**
      * **stories.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **stories.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes: string | null;
    }
    export interface JSONSelectable {
      /**
      * **stories.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('stories_id_seq'::regclass)`
      */
      id: number;
      /**
      * **stories.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active: boolean;
      /**
      * **stories.copyright**
      * - `int2` in database
      * - Nullable, no default
      */
      copyright: number | null;
      /**
      * **stories.library_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('stories_library_id_seq'::regclass)`
      */
      library_id: number;
      /**
      * **stories.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **stories.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes: string | null;
    }
    export interface Whereable {
      /**
      * **stories.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('stories_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stories.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stories.copyright**
      * - `int2` in database
      * - Nullable, no default
      */
      copyright?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stories.library_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('stories_library_id_seq'::regclass)`
      */
      library_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stories.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stories.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **stories.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('stories_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **stories.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **stories.copyright**
      * - `int2` in database
      * - Nullable, no default
      */
      copyright?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stories.library_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('stories_library_id_seq'::regclass)`
      */
      library_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **stories.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stories.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **stories.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('stories_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **stories.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **stories.copyright**
      * - `int2` in database
      * - Nullable, no default
      */
      copyright?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stories.library_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('stories_library_id_seq'::regclass)`
      */
      library_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **stories.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stories.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'stories_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace users {
    export type Table = 'users';
    export interface Selectable {
      /**
      * **users.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('users_id_seq'::regclass)`
      */
      id: number;
      /**
      * **users.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active: boolean;
      /**
      * **users.level**
      * - `text` in database
      * - `NOT NULL`, default: `'info'::text`
      */
      level: string;
      /**
      * **users.library_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('users_library_id_seq'::regclass)`
      */
      library_id: number;
      /**
      * **users.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes: string | null;
      /**
      * **users.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password: string;
      /**
      * **users.username**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      username: string;
    }
    export interface JSONSelectable {
      /**
      * **users.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('users_id_seq'::regclass)`
      */
      id: number;
      /**
      * **users.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active: boolean;
      /**
      * **users.level**
      * - `text` in database
      * - `NOT NULL`, default: `'info'::text`
      */
      level: string;
      /**
      * **users.library_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('users_library_id_seq'::regclass)`
      */
      library_id: number;
      /**
      * **users.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes: string | null;
      /**
      * **users.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password: string;
      /**
      * **users.username**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      username: string;
    }
    export interface Whereable {
      /**
      * **users.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('users_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.level**
      * - `text` in database
      * - `NOT NULL`, default: `'info'::text`
      */
      level?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.library_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('users_library_id_seq'::regclass)`
      */
      library_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.username**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      username?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **users.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('users_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **users.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **users.level**
      * - `text` in database
      * - `NOT NULL`, default: `'info'::text`
      */
      level?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **users.library_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('users_library_id_seq'::regclass)`
      */
      library_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **users.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.username**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      username: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **users.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('users_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **users.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **users.level**
      * - `text` in database
      * - `NOT NULL`, default: `'info'::text`
      */
      level?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **users.library_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('users_library_id_seq'::regclass)`
      */
      library_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **users.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.password**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      password?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.username**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      username?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'uk_users_username' | 'users_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace volumes {
    export type Table = 'volumes';
    export interface Selectable {
      /**
      * **volumes.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('volumes_id_seq'::regclass)`
      */
      id: number;
      /**
      * **volumes.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active: boolean;
      /**
      * **volumes.copyright**
      * - `int2` in database
      * - Nullable, no default
      */
      copyright: number | null;
      /**
      * **volumes.isbn**
      * - `text` in database
      * - Nullable, no default
      */
      isbn: string | null;
      /**
      * **volumes.library_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('volumes_library_id_seq'::regclass)`
      */
      library_id: number;
      /**
      * **volumes.location**
      * - `text` in database
      * - Nullable, no default
      */
      location: string | null;
      /**
      * **volumes.media**
      * - `text` in database
      * - Nullable, no default
      */
      media: string | null;
      /**
      * **volumes.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **volumes.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes: string | null;
      /**
      * **volumes.read**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      read: boolean;
    }
    export interface JSONSelectable {
      /**
      * **volumes.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('volumes_id_seq'::regclass)`
      */
      id: number;
      /**
      * **volumes.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active: boolean;
      /**
      * **volumes.copyright**
      * - `int2` in database
      * - Nullable, no default
      */
      copyright: number | null;
      /**
      * **volumes.isbn**
      * - `text` in database
      * - Nullable, no default
      */
      isbn: string | null;
      /**
      * **volumes.library_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('volumes_library_id_seq'::regclass)`
      */
      library_id: number;
      /**
      * **volumes.location**
      * - `text` in database
      * - Nullable, no default
      */
      location: string | null;
      /**
      * **volumes.media**
      * - `text` in database
      * - Nullable, no default
      */
      media: string | null;
      /**
      * **volumes.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **volumes.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes: string | null;
      /**
      * **volumes.read**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      read: boolean;
    }
    export interface Whereable {
      /**
      * **volumes.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('volumes_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **volumes.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **volumes.copyright**
      * - `int2` in database
      * - Nullable, no default
      */
      copyright?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **volumes.isbn**
      * - `text` in database
      * - Nullable, no default
      */
      isbn?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **volumes.library_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('volumes_library_id_seq'::regclass)`
      */
      library_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **volumes.location**
      * - `text` in database
      * - Nullable, no default
      */
      location?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **volumes.media**
      * - `text` in database
      * - Nullable, no default
      */
      media?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **volumes.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **volumes.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **volumes.read**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      read?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **volumes.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('volumes_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **volumes.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **volumes.copyright**
      * - `int2` in database
      * - Nullable, no default
      */
      copyright?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **volumes.isbn**
      * - `text` in database
      * - Nullable, no default
      */
      isbn?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **volumes.library_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('volumes_library_id_seq'::regclass)`
      */
      library_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **volumes.location**
      * - `text` in database
      * - Nullable, no default
      */
      location?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **volumes.media**
      * - `text` in database
      * - Nullable, no default
      */
      media?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **volumes.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **volumes.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **volumes.read**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      read?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **volumes.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('volumes_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **volumes.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **volumes.copyright**
      * - `int2` in database
      * - Nullable, no default
      */
      copyright?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **volumes.isbn**
      * - `text` in database
      * - Nullable, no default
      */
      isbn?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **volumes.library_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('volumes_library_id_seq'::regclass)`
      */
      library_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **volumes.location**
      * - `text` in database
      * - Nullable, no default
      */
      location?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **volumes.media**
      * - `text` in database
      * - Nullable, no default
      */
      media?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **volumes.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **volumes.notes**
      * - `text` in database
      * - Nullable, no default
      */
      notes?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **volumes.read**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      read?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'volumes_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace volumes_stories {
    export type Table = 'volumes_stories';
    export interface Selectable {
      /**
      * **volumes_stories.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('volumes_stories_id_seq'::regclass)`
      */
      id: number;
      /**
      * **volumes_stories.volume_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('volumes_stories_volume_id_seq'::regclass)`
      */
      volume_id: number;
      /**
      * **volumes_stories.story_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('volumes_stories_story_id_seq'::regclass)`
      */
      story_id: number;
    }
    export interface JSONSelectable {
      /**
      * **volumes_stories.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('volumes_stories_id_seq'::regclass)`
      */
      id: number;
      /**
      * **volumes_stories.volume_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('volumes_stories_volume_id_seq'::regclass)`
      */
      volume_id: number;
      /**
      * **volumes_stories.story_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('volumes_stories_story_id_seq'::regclass)`
      */
      story_id: number;
    }
    export interface Whereable {
      /**
      * **volumes_stories.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('volumes_stories_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **volumes_stories.volume_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('volumes_stories_volume_id_seq'::regclass)`
      */
      volume_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **volumes_stories.story_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('volumes_stories_story_id_seq'::regclass)`
      */
      story_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **volumes_stories.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('volumes_stories_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **volumes_stories.volume_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('volumes_stories_volume_id_seq'::regclass)`
      */
      volume_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **volumes_stories.story_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('volumes_stories_story_id_seq'::regclass)`
      */
      story_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **volumes_stories.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('volumes_stories_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **volumes_stories.volume_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('volumes_stories_volume_id_seq'::regclass)`
      */
      volume_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **volumes_stories.story_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('volumes_stories_story_id_seq'::regclass)`
      */
      story_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'uk_volumes_stories_story_id_volume_id' | 'uk_volumes_stories_volume_id_story_id' | 'volumes_stories_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = authors.Table | authors_series.Table | authors_stories.Table | authors_volumes.Table | libraries.Table | series.Table | series_stories.Table | stories.Table | users.Table | volumes.Table | volumes_stories.Table;
  export type Selectable = authors.Selectable | authors_series.Selectable | authors_stories.Selectable | authors_volumes.Selectable | libraries.Selectable | series.Selectable | series_stories.Selectable | stories.Selectable | users.Selectable | volumes.Selectable | volumes_stories.Selectable;
  export type JSONSelectable = authors.JSONSelectable | authors_series.JSONSelectable | authors_stories.JSONSelectable | authors_volumes.JSONSelectable | libraries.JSONSelectable | series.JSONSelectable | series_stories.JSONSelectable | stories.JSONSelectable | users.JSONSelectable | volumes.JSONSelectable | volumes_stories.JSONSelectable;
  export type Whereable = authors.Whereable | authors_series.Whereable | authors_stories.Whereable | authors_volumes.Whereable | libraries.Whereable | series.Whereable | series_stories.Whereable | stories.Whereable | users.Whereable | volumes.Whereable | volumes_stories.Whereable;
  export type Insertable = authors.Insertable | authors_series.Insertable | authors_stories.Insertable | authors_volumes.Insertable | libraries.Insertable | series.Insertable | series_stories.Insertable | stories.Insertable | users.Insertable | volumes.Insertable | volumes_stories.Insertable;
  export type Updatable = authors.Updatable | authors_series.Updatable | authors_stories.Updatable | authors_volumes.Updatable | libraries.Updatable | series.Updatable | series_stories.Updatable | stories.Updatable | users.Updatable | volumes.Updatable | volumes_stories.Updatable;
  export type UniqueIndex = authors.UniqueIndex | authors_series.UniqueIndex | authors_stories.UniqueIndex | authors_volumes.UniqueIndex | libraries.UniqueIndex | series.UniqueIndex | series_stories.UniqueIndex | stories.UniqueIndex | users.UniqueIndex | volumes.UniqueIndex | volumes_stories.UniqueIndex;
  export type Column = authors.Column | authors_series.Column | authors_stories.Column | authors_volumes.Column | libraries.Column | series.Column | series_stories.Column | stories.Column | users.Column | volumes.Column | volumes_stories.Column;
  export type AllTables = [authors.Table, authors_series.Table, authors_stories.Table, authors_volumes.Table, libraries.Table, series.Table, series_stories.Table, stories.Table, users.Table, volumes.Table, volumes_stories.Table];
  export type AllMaterializedViews = [];


  export type SelectableForTable<T extends Table> = {
    authors: authors.Selectable;
    authors_series: authors_series.Selectable;
    authors_stories: authors_stories.Selectable;
    authors_volumes: authors_volumes.Selectable;
    libraries: libraries.Selectable;
    series: series.Selectable;
    series_stories: series_stories.Selectable;
    stories: stories.Selectable;
    users: users.Selectable;
    volumes: volumes.Selectable;
    volumes_stories: volumes_stories.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    authors: authors.JSONSelectable;
    authors_series: authors_series.JSONSelectable;
    authors_stories: authors_stories.JSONSelectable;
    authors_volumes: authors_volumes.JSONSelectable;
    libraries: libraries.JSONSelectable;
    series: series.JSONSelectable;
    series_stories: series_stories.JSONSelectable;
    stories: stories.JSONSelectable;
    users: users.JSONSelectable;
    volumes: volumes.JSONSelectable;
    volumes_stories: volumes_stories.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    authors: authors.Whereable;
    authors_series: authors_series.Whereable;
    authors_stories: authors_stories.Whereable;
    authors_volumes: authors_volumes.Whereable;
    libraries: libraries.Whereable;
    series: series.Whereable;
    series_stories: series_stories.Whereable;
    stories: stories.Whereable;
    users: users.Whereable;
    volumes: volumes.Whereable;
    volumes_stories: volumes_stories.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    authors: authors.Insertable;
    authors_series: authors_series.Insertable;
    authors_stories: authors_stories.Insertable;
    authors_volumes: authors_volumes.Insertable;
    libraries: libraries.Insertable;
    series: series.Insertable;
    series_stories: series_stories.Insertable;
    stories: stories.Insertable;
    users: users.Insertable;
    volumes: volumes.Insertable;
    volumes_stories: volumes_stories.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    authors: authors.Updatable;
    authors_series: authors_series.Updatable;
    authors_stories: authors_stories.Updatable;
    authors_volumes: authors_volumes.Updatable;
    libraries: libraries.Updatable;
    series: series.Updatable;
    series_stories: series_stories.Updatable;
    stories: stories.Updatable;
    users: users.Updatable;
    volumes: volumes.Updatable;
    volumes_stories: volumes_stories.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    authors: authors.UniqueIndex;
    authors_series: authors_series.UniqueIndex;
    authors_stories: authors_stories.UniqueIndex;
    authors_volumes: authors_volumes.UniqueIndex;
    libraries: libraries.UniqueIndex;
    series: series.UniqueIndex;
    series_stories: series_stories.UniqueIndex;
    stories: stories.UniqueIndex;
    users: users.UniqueIndex;
    volumes: volumes.UniqueIndex;
    volumes_stories: volumes_stories.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    authors: authors.Column;
    authors_series: authors_series.Column;
    authors_stories: authors_stories.Column;
    authors_volumes: authors_volumes.Column;
    libraries: libraries.Column;
    series: series.Column;
    series_stories: series_stories.Column;
    stories: stories.Column;
    users: users.Column;
    volumes: volumes.Column;
    volumes_stories: volumes_stories.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    authors: authors.SQL;
    authors_series: authors_series.SQL;
    authors_stories: authors_stories.SQL;
    authors_volumes: authors_volumes.SQL;
    libraries: libraries.SQL;
    series: series.SQL;
    series_stories: series_stories.SQL;
    stories: stories.SQL;
    users: users.SQL;
    volumes: volumes.SQL;
    volumes_stories: volumes_stories.SQL;
  }[T];

}
